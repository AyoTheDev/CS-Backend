buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath "de.undercouch:gradle-download-task:3.4.3"
	}
}

plugins {
	id 'org.springframework.boot' version '2.6.3'
	id 'java'
	id 'com.netflix.dgs.codegen' version '5.1.16'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}
ext {
	springBootVersion = '2.6.3'
}

group = 'com.scienta.cs'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
apply plugin: 'de.undercouch.download'

repositories {
	mavenLocal()
	mavenCentral()
}
dependencies {
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.security:spring-security-core'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	//DB
	implementation 'org.postgresql:postgresql:42.3.1'
	implementation 'org.flywaydb:flyway-core:8.4.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// swagger
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'

	//UTILS
	implementation 'org.apache.commons:commons-io:1.3.2'

	//CSV
	implementation 'com.opencsv:opencsv:5.7.1'

	//DGS
	implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:4.9.20"))
	implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter"

	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.0'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	implementation project(":nowpayments")
	implementation project(":easypost")
	implementation project(":notification")
	testImplementation 'uk.co.jemos.podam:podam:7.2.10.RELEASE'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

bootJar.doLast {
}

sourceSets {
	codeGen {
		java.srcDir "${buildDir}/generated/sourses"
	}
	main {
		runtimeClasspath += sourceSets.codeGen.output
	}
}

generateJava{
	schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
	packageName = 'com.scienta.cs' // The package name to use to generate sources
	generateClient = true // Enable generating the type safe query API
	typeMapping = [
			"Long" : "java.lang.Long",
			"Upload": "com.netflix.graphql.dgs.scalars.UploadScalar"
	]
}


test {
	useJUnitPlatform()
}
